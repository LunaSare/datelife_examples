trees
max.depth <- round(max(sapply(trees, function(x) max(ape::branching.times(x)))) + 5, digits = -1)
max.depth
trees <- lapply(trees, function(x) {
x$root.edge <- max.depth - max(ape::branching.times(x))
x
})
trees
class(trees) <- "multiPhylo"
trees <- lapply(trees, function(x) {
x$root.edge <- max.depth - max(ape::branching.times(x))
class(x) <- "multiPhylo"
})
trees
class(trees) <- "multiPhylo"
trees
trees <- lapply(trees, function(x) {
x$root.edge <- max.depth - max(ape::branching.times(x))
class(x) <- "multiPhylo"
x
})
trees
trees = tax_datedotol
trees <- lapply(trees, function(x) {
x$root.edge <- max.depth - max(ape::branching.times(x))
class(x) <- "multiPhylo"
x
})
trees <- list(trees)
class(trees) <- "multiPhylo"
trees
trees <- lapply(trees, function(x) {
x$root.edge <- max.depth - max(ape::branching.times(x))
class(x) <- "multiPhylo"
x
})
names(trees[[1]])
trees[[1]]$root.edge
mai4 <- unique(unlist(sapply(trees, "[", "tip.label")))
ind <- which.max(nchar(mai4))
mai4 <- graphics::strwidth(s = mai4[ind], units = "inches", cex = cex, font = 3)
cex = graphics::par("cex")
mai4 <- unique(unlist(sapply(trees, "[", "tip.label")))
ind <- which.max(nchar(mai4))
mai4 <- graphics::strwidth(s = mai4[ind], units = "inches", cex = cex, font = 3)
mai4
cex
ho <- phylo_height_omi(tree = trees[[i]])
i
i=1
ho <- phylo_height_omi(tree = trees[[i]])
trees[[1]]
names(trees[[1]])
trees = tax_datedotol
trees <- list(trees)
trees <- lapply(trees, function(x) {
x$root.edge <- max.depth - max(ape::branching.times(x))
x
})
names(trees[[1]])
ho <- phylo_height_omi(tree = trees[[i]])
ho
dir = "datedotol"
grDevices::pdf(file = paste0(gsub("\\.png$|\\.pdf$", "", dir), "/", gsub("\\.png$|\\.pdf$", "", dir), "_", i, ".", write),
height = ho$height/72)
paste0(gsub("\\.png$|\\.pdf$", "", dir)
, "/", gsub("\\.png$|\\.pdf$", "", dir)
, "_", i, ".", write)
write = "pdf"
grDevices::pdf(file = paste0(gsub("\\.png$|\\.pdf$", "", dir), "/", gsub("\\.png$|\\.pdf$", "", dir), "_", i, ".", write),
height = ho$height/72)
?folder
file
file = paste0("docs/datedotol_", taxon)
file
grepl("/", "file")
grepl("\\/", "file")
grepl("//", "file")
grepl("\/", "file")
grepl("//", "file")
grepl("[\/]", "file")
grepl("[\/]", file)
grepl("\/", file)
grepl("//", file)
grepl("/", file)
utils::data(felid_gdr_phylo_all)
plot_phylo_all(felid_gdr_phylo_all$phylo_all)
plot_phylo_all(felid_gdr_phylo_all$phylo_all, cex =.05)
plot_phylo_all(felid_gdr_phylo_all$phylo_all, cex =.5)
load_all("~/Desktop/datelife/")
plot_phylo_all(felid_gdr_phylo_all$phylo_all, cex =.5)
load_all("~/Desktop/datelife/")
plot_phylo(tax_datedotol)
tree = tax_datedotol
ind <- which.max(nchar(tree$tip.label))
mai4 <- graphics::strwidth(s = tree$tip.label[ind], units = "inches", cex = cex, font = 3)
mai4
ind
tree$tip.label
ho <- phylo_height_omi(tree = tree)
ho
ho
graphics::par(xpd = NA, mai = c(0,0,0,mai4), omi = c(ho$omi1, 0, 1, 0))
ape::plot.phylo(tree, cex = cex, #edge.width = 2,
label.offset = 0.5, x.lim = c(0, max.depth), root.edge = TRUE, plot = TRUE)  #, ...
graphics::par(xpd = NA, mai = c(0,0,0,mai4), omi = c(1, 0, 1, 0))
ape::plot.phylo(tree, cex = cex, #edge.width = 2,
label.offset = 0.5, x.lim = c(0, max.depth), root.edge = TRUE, plot = TRUE)  #, ...
graphics::par(xpd = FALSE)
phyloch::axisGeo(GTS = strat2012, unit = c("period"),
col = c("gray80", "white"), gridcol = c("gray80", "white"), cex = 0.5,
gridty = "twodash")
graphics::mtext("Time (MYA)", cex = cex, side = 1, font = 2, line = (ho$omi1-0.2)/0.2,
outer = TRUE, at = 0.4)
titlei <- wrap_string_to_plot(string = "Tree", max_cex = 0.75, whole = FALSE)
string = "Tree"
init_strwrap_width = 50
wraps <- strwrap(string, width = init_strwrap_width)
wraps
max_cex = 1
min_cex = 0.5
string_font = 2
sw <- graphics::strwidth(s = wraps, units = "inches", cex = max_cex, font = string_font)
sh <- graphics::strheight(s = paste(wraps, collapse = "\n"), units = "inches", cex = max_cex, font = string_font)
sw
sh
wi <- init_strwrap_width - 1
w1
wi
sh > max_height
max_height = graphics::par("din")[2]-graphics::par("pin")[2]- graphics::par("omi")[1]-graphics::par("mai")[1] - 0.2
max_height
sh
sh > max_height
max(sw) > max_width
0.9*graphics::par("din")[1]
max_width = 0.9*graphics::par("din")[1
]
max(sw) > max_width
min_width = 0.9*graphics::par("din")[1]
min_width
max(sw) < min_width
sw
paste(wraps, collapse = "\n")
!sh > max_height
!sh > max_height & !max(sw) > max_width
load_all("~/Desktop/datelife/")
titlei <- wrap_string_to_plot(string = "title", max_cex = 0.75, whole = FALSE)
titlei
graphics::mtext(text = titlei$wrapped, outer = TRUE,
cex = titlei$string_cex, font = titlei$string_font, line = 1)
graphics::mtext(text = titlei$wrapped, outer = TRUE,
cex = titlei$string_cex, font = titlei$string_font, line = 0)
cex = titlei$string_cex, font = titlei$string_font, line = 0)
plot_phylo(tree = tax_datedotol)
load_all("~/Desktop/datelife/")
paste0("docs/datedotol_", taxon)
titlei <- wrap_string_to_plot(string = "title", max_cex = 1, whole = FALSE)
titlei
plot_phylo(tree = tax_datedotol, write = "pdf", file = paste0("docs/datedotol_", taxon, ".pdf"))
getwd()
ho
grDevices::pdf(file = file_name, height = ho$height/72)
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("docs/datedotol_", taxon, ".pdf"))
file_name = paste0("docs/datedotol_", taxon, ".pdf")
grDevices::pdf(file = file_name, height = ho$height/72)
file_name
graphics::par(xpd = NA, mai = c(0,0,0,mai4), omi = c(ho$omi1, 0, 1, 0))
# plot_chronogram.phylo(trees[[i]], cex = 1.5, edge.width = 2, label.offset = 0.5,
# x.lim = c(0, max.depth), root.edge = TRUE, root.edge.color = "white")
ape::plot.phylo(tree, cex = cex, #edge.width = 2,
label.offset = 0.5, x.lim = c(0, max.depth), root.edge = TRUE, plot = TRUE)  #, ...
graphics::par(xpd = FALSE)
grDevices::dev.off()
loadd(taxon)
source("R/global_packages.R")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
knitr::opts_knit$set(root.dir = "docs")
knitr::opts_knit$set(base.dir = "docs")
getwd()
source("R/global_functions.R")
plan_data <- drake_plan(
taxa <- c("Cetacea", "Fringilidae", "Hominidae"),
tax_dqall <- lapply(taxa, make_datelife_query, get_spp_from_taxon = TRUE),
tax_drall <- lapply(tax_dqall, get_datelife_result),
tax_summall <- lapply(seq(length(taxa)), function(i)
get_taxon_summary(datelife_query = tax_dqall[[i]],
datelife_result = tax_drall[[i]])),
tax_phylomedall <- lapply(seq(length(taxa)), function(i)
summarize_datelife_result(datelife_query = tax_dqall[[i]],
datelife_result = tax_drall[[i]],
summary_format = "phylo_median",
taxon_summary = "summary")),
tax_datedotolall <- lapply(seq(length(taxa)), function(i)
get_dated_otol_induced_subtree(input = tax_dqall[[i]],
ott_id = tax_dqall[[i]]$ott_ids))
)
make(plan_data)
plan_data <- drake_plan(
taxa = c("Cetacea", "Fringilidae", "Hominidae"),
tax_dqall = lapply(taxa, make_datelife_query, get_spp_from_taxon = TRUE),
tax_drall = lapply(tax_dqall, get_datelife_result),
tax_summall = lapply(seq(length(taxa)), function(i)
get_taxon_summary(datelife_query = tax_dqall[[i]],
datelife_result = tax_drall[[i]])),
tax_phylomedall = lapply(seq(length(taxa)), function(i)
summarize_datelife_result(datelife_query = tax_dqall[[i]],
datelife_result = tax_drall[[i]],
summary_format = "phylo_median",
taxon_summary = "summary")),
tax_datedotolall = lapply(seq(length(taxa)), function(i)
get_dated_otol_induced_subtree(input = tax_dqall[[i]],
ott_id = tax_dqall[[i]]$ott_ids))
)
make(plan_data)
loadd(taxa)
loadd(tax_dqall)
loadd(tax_drall)
loadd(tax_summall)
loadd(tax_phylomedall)
loadd(tax_datedotolall)
i
i=1
for(i in seq(taxa)){
print(taxa[i])
plan_report <- drake_plan(
taxon = taxa[i],
tax_dq = tax_dqall[[i]],
tax_dr = tax_drall[[i]],
tax_summ = tax_summall[[i]],
tax_phyloall = suppressMessages(summarize_datelife_result(datelife_query = tax_dq, datelife_result = tax_dr, summary_format = "phylo_all")),
tax_phylomedian = tax_phylomedall[[i]],
tax_datedotol = tax_datedotolall[[i]],
reportname = paste0("report_", taxa[i]),
mdname = paste0("docs/", reportname, ".md"),
report = make_report(mdname),
summary_pdf_report = render_pdf(reportname, "docs", report)
)
assign(value = plan_report, x = taxa[i])
make(get(taxa[i]))
# make(Cetacea)
}
loadd(taxon)
loadd(tax_dq)
loadd(tax_dr)
loadd(tax_summ)
loadd(tax_phyloall)
loadd(tax_phylomedian)
loadd(tax_datedotol)
# for (i in seq(length(edge_cols))){
#   names(fam_tree_brlen3$maps[[i]]) <- namess[i]
# }
# plot_phylo_all(trees = tax_datedotol, write = "pdf", file = paste0("docs/datedotol_", taxon, ".pdf"))
#
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("datedotol_", taxon, ".pdf"))
tree$root.edge
tax_datedotol$root.edge
load_all("~/Desktop/datelife/")
load_all("~/Desktop/datelife/")
# for (i in seq(length(edge_cols))){
#   names(fam_tree_brlen3$maps[[i]]) <- namess[i]
# }
# plot_phylo_all(trees = tax_datedotol, write = "pdf", file = paste0("docs/datedotol_", taxon, ".pdf"))
#
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("datedotol_", taxon, ".pdf"))
load_all("~/Desktop/datelife/")
# for (i in seq(length(edge_cols))){
#   names(fam_tree_brlen3$maps[[i]]) <- namess[i]
# }
# plot_phylo_all(trees = tax_datedotol, write = "pdf", file = paste0("docs/datedotol_", taxon, ".pdf"))
#
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("datedotol_", taxon, ".pdf"))
# for (i in seq(length(edge_cols))){
#   names(fam_tree_brlen3$maps[[i]]) <- namess[i]
# }
# plot_phylo_all(trees = tax_datedotol, write = "pdf", file = paste0("docs/datedotol_", taxon, ".pdf"))
#
utils::data("strat2012", package = "phyloch")
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("datedotol_", taxon, ".pdf"))
load_all("~/Desktop/datelife/")
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("datedotol_", taxon, ".pdf"), cex =0.75)
load_all("~/Desktop/datelife/")
plot_phylo(tree = tax_datedotol, write = "pdf", file_name = paste0("datedotol_", taxon, ".pdf"), cex =0.75)
for(i in seq(taxa)){
print(taxa[i])
plan_report <- drake_plan(
taxon = taxa[i],
tax_dq = tax_dqall[[i]],
tax_dr = tax_drall[[i]],
tax_summ = tax_summall[[i]],
tax_phyloall = suppressMessages(summarize_datelife_result(datelife_query = tax_dq, datelife_result = tax_dr, summary_format = "phylo_all")),
tax_phylomedian = tax_phylomedall[[i]],
tax_datedotol = tax_datedotolall[[i]],
reportname = paste0("report_", taxa[i]),
mdname = paste0("docs/", reportname, ".md"),
report = make_report(mdname),
summary_pdf_report = render_pdf(reportname, "docs", report)
)
assign(value = plan_report, x = taxa[i])
make(get(taxa[i]))
# make(Cetacea)
}
edge_cols
# all_values <- sum_tips(tax_datedotol, frac)
edge_cols <- rep("blue", length(tax_datedotol$edge.length))
loadd(taxon)
loadd(tax_dq)
loadd(tax_dr)
loadd(tax_summ)
loadd(tax_phyloall)
loadd(tax_phylomedian)
loadd(tax_datedotol)
# all_values <- sum_tips(tax_datedotol, frac)
edge_cols <- rep("blue", length(tax_datedotol$edge.length))
length(edge_cols)
tax_datedotol$maps <- as.list(rep(1, length(edge_cols)))
# names(trees[[1]])
# ho
# plot(tax_datedotol)
# axisPhylo()
#
plotSimmap(tax_datedotol, type="fan",part= 0.9, fsize=0.3, ftype="i", colors = edge_cols)
loadd(taxon)
loadd(tax_dq)
loadd(tax_dr)
loadd(tax_summ)
loadd(tax_phyloall)
loadd(tax_phylomedian)
loadd(tax_datedotol)
names(tax_summ) %in% tax_datedotol$tip.label
tax_summ
colnames(tax_summ$matrix)
tax_datedotol$tip.label
colnames(tax_summ$matrix) %in% tax_datedotol$tip.label
nn <- sapply(1:ncol(tax_summ$matrix), function(i) sum(tax_summ$matrix[,i]))
nn
frac <- nn/nrow(tax_summ$matrix)*100
frac
names(frac) <- colnames(tax_summ$matrix)
frac
frac[colnames(tax_summ$matrix) %in% tax_datedotol$tip.label]
colnames(tax_summ$matrix) %in% tax_datedotol$tip.label
gusb(" ", "_", tax_datedotol$tip.label)
gsub(" ", "_", tax_datedotol$tip.label)
gsub(" ", "_", colnames(tax_summ$matrix))
x1 <- gsub(" ", "_", colnames(tax_summ$matrix))
x2 <- gsub(" ", "_", tax_datedotol$tip.label)
frac[x1 %in% x2]
fracmatches <- frac[x1 %in% x2]
all_values <- sum_tips(tax_datedotol, fracmatches)
all_values
fracmatches
tax_datedotol
plot(tax_datedotol)
sum_tips
is.binary(tax_datedotol)
tax_datedotol$edge
edgelabels()
nodelabels()
names(tax_datedotol)
tax_datedotol$edge.length
ape::write.tree(tax_datedotol)
t2 <- ape::collapse.singles(tax_datedotol)
tax_datedotol <- ape::collapse.singles(t2)
is.binary(tax_datedotol)
tax_datedotol$edge
plot(tax_datedotol)
edgelabels()
nodelabels()
all_values <- sum_tips(tax_datedotol, fracmatches)
all_values
tax_datedotol$edge.length
edge_cols <- rep("blue", length(tax_datedotol$edge.length))
tax_datedotol$maps <- as.list(rep(1, length(edge_cols)))
# for (i in seq(length(edge_cols))){
#   names(fam_tree_brlen3$maps[[i]]) <- namess[i]
# }
plotSimmap(tax_datedotol, type="fan",part= 0.9, fsize=0.3, ftype="i", colors = edge_cols)
rep(1, ape::Ntip(tax_datedotol)
)
ape::Ntip(tax_datedotol)
fracmatches <- rep(1, ape::Ntip(tax_datedotol))
names(fracmatches) <- tax_datedotol$tip.label
all_values <- sum_tips(tax_datedotol, fracmatches)
all_values
fracmatches
edge_cols <- rep("blue", length(tax_datedotol$edge.length))
edge_cols
getwd()
phy <- tax_treefromtaxall[[4]]$phy
degree <- tabulate(phy$edge[, 1])
target <- which(degree > 2)
if (!length(target)) return(phy)
n <- length(phy$tip.label)
source("R/global_packages.R")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
knitr::opts_knit$set(root.dir = "docs")
knitr::opts_knit$set(base.dir = "docs")
getwd()
source("R/global_functions.R")
loadd(tax_treefromtaxall)
phy <- tax_treefromtaxall[[4]]$phy
degree <- tabulate(phy$edge[, 1])
target <- which(degree > 2)
if (!length(target)) return(phy)
n <- length(phy$tip.label)
nb.edge <- dim(phy$edge)[1]
nextnode <- n + phy$Nnode + 1L
new.edge <- edge2delete <- NULL
wbl <- FALSE
!is.null(phy$edge.length)
for (node in target) {
ind <- which(phy$edge[, 1] == node)
N <- length(ind)
desc <- phy$edge[ind, 2]
if (random) {
## if we shuffle the descendants, we need to eventually
## reorder the corresponding branch lenghts (see below)
## so we store the result of sample()
tmp <- sample(length(desc))
desc <- desc[tmp]
res <- rtree(N)$edge
} else {
res <- matrix(0L, 2*N - 2, 2)
res[, 1] <- N + rep(1:(N - 1), each = 2)
res[, 2] <- N + rep(2:N, each = 2)
res[seq(1, by = 2, length.out = N - 1), 2] <- 1:(N - 1)
res[length(res)] <- N
}
if (wbl) {
## keep the branch lengths coming from `node'
el <- numeric(dim(res)[1]) # initialized with 0's
el[res[, 2] <= N] <-
if (random) phy$edge.length[ind][tmp] else phy$edge.length[ind]
}
## now substitute the nodes in `res'
## `node' stays at the "root" of these new
## edges whereas their "tips" are `desc'
Nodes <- c(node, nextnode:(nextnode + N - 3L))
res[, 1] <- Nodes[res[, 1] - N]
tmp <- res[, 2] > N
res[tmp, 2] <- Nodes[res[tmp, 2] - N]
res[!tmp, 2] <- desc[res[!tmp, 2]]
new.edge <- rbind(new.edge, res)
edge2delete <- c(edge2delete, ind)
if (wbl) new.edge.length <- c(new.edge.length, el)
nextnode <- nextnode + N - 2L
phy$Nnode <- phy$Nnode + N - 2L
}
random = TRUE
for (node in target) {
ind <- which(phy$edge[, 1] == node)
N <- length(ind)
desc <- phy$edge[ind, 2]
if (random) {
## if we shuffle the descendants, we need to eventually
## reorder the corresponding branch lenghts (see below)
## so we store the result of sample()
tmp <- sample(length(desc))
desc <- desc[tmp]
res <- rtree(N)$edge
} else {
res <- matrix(0L, 2*N - 2, 2)
res[, 1] <- N + rep(1:(N - 1), each = 2)
res[, 2] <- N + rep(2:N, each = 2)
res[seq(1, by = 2, length.out = N - 1), 2] <- 1:(N - 1)
res[length(res)] <- N
}
if (wbl) {
## keep the branch lengths coming from `node'
el <- numeric(dim(res)[1]) # initialized with 0's
el[res[, 2] <= N] <-
if (random) phy$edge.length[ind][tmp] else phy$edge.length[ind]
}
## now substitute the nodes in `res'
## `node' stays at the "root" of these new
## edges whereas their "tips" are `desc'
Nodes <- c(node, nextnode:(nextnode + N - 3L))
res[, 1] <- Nodes[res[, 1] - N]
tmp <- res[, 2] > N
res[tmp, 2] <- Nodes[res[tmp, 2] - N]
res[!tmp, 2] <- desc[res[!tmp, 2]]
new.edge <- rbind(new.edge, res)
edge2delete <- c(edge2delete, ind)
if (wbl) new.edge.length <- c(new.edge.length, el)
nextnode <- nextnode + N - 2L
phy$Nnode <- phy$Nnode + N - 2L
}
phy$edge <- rbind(phy$edge[-edge2delete, ], new.edge)
phy <- reorder(phy, "cladewise", FALSE, n, 1L)
newNb <- integer(phy$Nnode)
newNb[1] <- n + 1L
sndcol <- phy$edge[, 2] > n
length(n + 2:phy$Nnode)
length(newNb[phy$edge[sndcol, 2] - n])
length(phy$edge[sndcol, 2])
length(n + 2:phy$Nnode) != length(newNb[phy$edge[sndcol, 2] - n])
source("R/multi2di_test.R")
#functions
tree <- tax_treefromtaxall[[4]]$phy
multi2di_test(tree)
!multi2di_test(tree)
seq(taxa)
loadd(taxa)
seq(taxa)
multi2di_test(tax_treefromtaxall[[i]]$phy)
for(i in seq(taxa)){
multi2di_test(tax_treefromtaxall[[i]]$phy)
}
for(i in seq(taxa)){
print(multi2di_test(tax_treefromtaxall[[i]]$phy))
}
